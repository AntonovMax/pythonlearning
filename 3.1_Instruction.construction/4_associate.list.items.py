# Элементы ассоциативного списка
#   Словарь - некоторый контейнер, который может содержать несколько наборов данных
# в виде элементов пар ключ:значение (ключ должен быть уникальным в пределеах словаря),
# по ключу можно обращаться к связанному с ним значению. Строки должны быть заключены в
# кавычки, а между ключем и связанным элементом должен стоять знак двоеточия.
# dict = {'name':'Bob', 'ref':'Phyton', 'sys':'Win'}
# del dict['name'] - удаляет пару ключ:значение
# keys() - метод возвращает все ключи в произвольном порядке,
# для сортировки можно включить в конструкцию sorted().
# с помощью in можно определять, содержит ли словарь нужный ключ (возврат True или False)
# В других языках список часто называют массивом, а словарь - ассоциативным массивом
#
#   Данные часто представлены в виде пар ключ:значение.
#   Пример: при заполнении веб-форм, текстовое значение, вводимое в поле ввода обычно связано
# с именем этого текстового поля, как с ключем.
#
#   переменная  - хранит одиночное значение;
#   список      - хранит несколько значений, упорядоченных по индексам;
#   кортеж      - хранит несколько фиксированных значений в определенной последовательности;
#   множество   - хранит несколько уникальных значений в неупорядоченном наборе;
#   словарь     - хранит несколько неупорядоченных пар ключ:значение.

# Задания:
# 1. Описать словарь, вывести содержащиеся в нем пары ключ:значение.
dict = {'name':'Bob', 'ref':'Phyton', 'sys':'Win'}
print('Dictionary:\t', dict)

# 2. Вывести на экран одиночное значение, указав на него ссылку по ключу.
print('Reference:\t', dict['ref'])

# 3. Вывести все ключи, содержащиеся в словаре.
print('All keys:\t', dict.keys())

# 4. Удалить пару из словаря, добавить новую, вывести содержимое.
del dict['name']
dict['user'] = 'Tom'
print('Dictionary:\t', dict)

# 5. Запустить поиск ключа, затем вывести результат поиска.
print('Is there a name key?:\t', 'name' in dict)
print('Is there a user key?:\t', 'user' in dict)
