#   Область видимости переменных
#
#   def (definition) - создание пользовательской функции, после ключевого слова следует название функции
# и скобки. В качестве имени функции можно использовать любой идентификатор, кроме ключевых слов Python
# так же существующих имен встроенных фенкций. Строка с определением функции должна заканчиваться двоеточием
# Инструкции располагаются ниже с использованием отступов.
#
#   def имя-функции () :
#       исполняемое-выражение
#       исполняемое-выражение
#
#   После выполнения инструкций в теле функции, программа передает управление в точку, следующую за
# вызовом этой функции. Принцип модульности, обеспечивающий изоляцию частей программы, которые должны
# выполняться периодически, очень полезен в программировании.
#   При создании пользовательских функций необходимо понимать принцип доступности переменных в программе
# (область видимости переменных).
#   - к переменным, создаваемым вне функции, можно обращаться из инструкций внутри функций - глобальные
# переменные;
#   - к переменным, создаваемым внутри фунуций, нельзя обращаться извне - локальная область видимости.
#   Ограниченная доступность локальных переменных означает, что переменные с одним и тем же именем без
# последсвий могут находиться в различных функциях.
#   Если необходимо иметь доступ к  глобальной переменной из любого места, ее нужно объявить как global,
# после которого следует имя переменной. После этого ей можно присвоить значение сколько угодно раз, и она
# будет достпна из любого места программы.
#   Если локальная и глобальная переменная имеет одно имя, функция будет использовать локальную.

"""""
# Задания:
    1. Проинициализировать переменную
global_var = 1

    2. Создать функцию с именем my_vars для вывода значения, содержащегося в глобальной переменной.
def my_vars() :
print('Global variable: ', global_var) - работать не будет, т.к. не описаны инструкции для функции

    3. Добавить блок, проиниализировав локальную переменную, вывести значение этой переменной
local_var = 2
print('Local variable: ', local_var)

    4. Добавить инструкции в блок функций, не забывая про отступы, и создать принудительно глобальную
переменную, присвоив ей начальное значение.
global inner_var
inner_var = 3

    5. Добавить вызов функции для выполнения содержащейся инструкции.
my_vars()

    6. Добавить инструкцию для вывода значений, содержащихся в глобальной переменной.
print('Coerced gloval: ', inner_var) , Coerce - принуждать

"""""

global_var = 1
global inner_var
inner_var = 3

def my_vars() :
    local_var = 2
    print('Local variable:\t\t', local_var)

print('Global variable:\t', global_var)

my_vars()

print('Coerced gloval:\t\t', inner_var)