""""
    Использование обратного вызова
    
    В Python есть возможность создавать анонимные функции (без имени), используя
ключевое слово lambda. Анонимная функция может содержать только одно выражение, 
которое должновсегда возвращать значение.
    В отличает от def, lambda возвращает объект, который можно присвоить переменной.
Впоследствии она может быть использована для того, чтобы обратиться к функции (обратный
вызов) в любом месте программы и исполнить блок выражений, которые содержит функция.
    Такми образом lambda позволяет использовать альтернативный синтаксис для создания
функции.
    
    Пример:
    def square(x) :
        return x ** 2
в более лаконичной форме выглядит:
    square = lambda x : x ** 2
такой способ используется для втавки функции в любое место кода. Например: обратные вызовы
часто программируются в виде однострочного lambda-выражения, встроенного непсредственно в
список аргументов место определения при помощи def и вызова по имени:
    def function_1 : исполняемые-выражения
    def function_2 : исполняемые-выражения
    callback = [function_1, function_2] 
такую запись можно выразить более кратко:
    callback = [lambda : выражение, lambda : выражение]
    
    !!! Определения функий, содержащих только одну инструкцию, могут быть записаны в одну строку:
callbacks = [function_1, function_2, function_3]
    
    !!! Для продолжения кода в следующей строке, можно использовать символ \.
    
"""""

# Задания:
# 1. Определить функции, возвращающие переданный аргумент, возведенный в различную степень:

def function_1 (x) : return x ** 2
def function_2 (x) : return x ** 3
def function_3 (x) : return x ** 4

# 2. Добавить инструкцию со списком обратных вызовов каждой из функицй, указав ссылки на их
# имена

callbacks = [function_1, function_2, function_3]

# 3. Вывести заголовок, а так же результат передачи значений каждой из трезх именованных функций

print('\nNamed functions:')
for function in callbacks : print('Result:', function(3))

# 4. Добавить инструкцию для создания списка вызовов анонимных функций, которые возвращают первый переданный
# аргумент, возведенный в различную степень

callbacks = [lambda x : x ** 2, lambda x : x ** 3, lambda x : x ** 4]

# 5. Вывести заголовок, а также результат передачи значений каждой из трех анонимных функций:

print('\nAnonimous functions:')
for function in callbacks : print('Result:', function(4))

#
#
