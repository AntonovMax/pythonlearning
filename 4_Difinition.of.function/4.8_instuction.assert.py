""""
    Отладка с помощью инструкции assert
    
    assert - утверждать
    Инструкция assert проверяет выбранное выражение на предмет равенства True или False
и выдает ошибку AssertionError, если проверка не пройдена. Так же может включать описательное
сообщение:
    
    assert проверочное-выражение , описательное-сообщение
    
когда проверка выражения не выполнена, интерпритатор сообщает об ошибке AssertionError и
прерывает иполнение программы. В случае же успешной проверки, инструкция assert не делает ничего,
и исполнение программы продолжается.
    
    Использование механизма проверки с помощью assert осень полезно для документирвоания
программы.  
    
    Используя опцию -0 при запуске программы, можно отключить проверку интерпритатором
инструкции assert. Прим.: python -0 assert.py 

    Assert vs исключения:
    Различия:
    - ислкючения предлагают способ обработки ошибок, которые могут происходить на этапе
исполнения
    - AssertionErrors обеспечивает программистов средствами для нахождения ошибок во время
работы над программой.

    Инструкции assert как правило удаляются из окончательных версий программы после того, как
отладка завершена, в то вермя как except остаются в программе и обрабатывают ошибки исполнения.
"""""

# Задание
# 1. Проинициализировать список из нескольких переменных

chars = ['Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon']

# 2. Проинициализировать функцию, принимающую единственный аргумент.

def display(elem):

# 3. Добавить инструкции в тело функции для проверки переданного знчения аргумента на целое
# и отображения элемента списка с сооответсвующим порядковым номером.

    assert type(elem) is int, 'Argument must be integer!'
    print('List elent', elem, '=', chars[elem])

# 4. Проинициализировать переменную целочисленным значением и вызвать функцию, передав ей
# значение этой переменной в качетсве аргумента.
# 5. Изменить значение переменной и вызвать функцию еще раз, передав ей в качестве аргумента
# это новое значение.

elem = 4
display(elem)

# print('Elem type:', type(elem))

elem = elem/2
display(elem)

"""
В данном случае AssertionError происходит в результате того, что операция деления возвращает не
целочисленную величину, а значение с плавающей точкой.
"""