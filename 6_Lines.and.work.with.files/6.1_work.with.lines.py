"""
    Работа со строками

Оператор    Описание                                    Пример
    +       Конкатенация (объединение) строк            'Hello' + 'Mike'
    *       Повторение строки указанное число раз       'Hello' * 2
    []      Выбор символа по указанному индексу         'Hello' [0]
    [:]     Извлечение среза по указанному диапазону    'Hello' [0:4]
            индексов.
    in      Проверка вхождения - возвращает True, если  'h' not in 'Hello'
            символ или подстрока в строке отсутствует
    r/R     "Сырая строка" - подавление экранирующей    print(r'\n')
            последовательности
    ''' ''' Строка документа - для описания модуля,     def sun (a, b) :
            функции, класса или метода                  ''' Add Args '''

!!! Операции проверки вхождения чувствительны к регистру, поэтому запись 'A' in 'a, b, c' не даст результата.

    Операторы извлечения срезов [] и [:] представлябт строку в виде простого списка, содержащего отдельные символы
в качестве элементов, к которым можно обращаться по их порядковому номеру.
    Аналогично операторы in и not in выполняют поиск в строке, работая с ее символами как с элементами списка.
    Оператор "сырая строка", r (или R), должен располагаться непосредственно перед открывающимися кавычками для
подавления управляющих символов в строке. Используется обычно в случаях, когда строка содержит символ \.
    Так называемая строка документации представляет собой многострочный комментарий, описывающий модуль, функцию, класс
или метод. В этих комментариях программы он становится в самом начале и должен заключаться в три одинарные кавычки.
Строка документации во время выполнения программы достпна в виде специального атрибута __doc__ объекта, к которому
можно обратиться, используя точечную запись. Как правило, все модули, функции и классы содержат данную строку
документации.

!!! Оператор извлечения среза [:] возвращает строку до символа, чей порядковый номер указан последним в диапазоне, не
включая его.
"""

# Задания:
# 1. Описать функцию, включающую строку документации

def display (s) :
    '''Выводим значение аргумента.'''
    print (s)

# 2. Добавить инструкцицю для вывода описания функции.

display(display.__doc__)

# 3. Добавить инструкцию для вывода неформатированной "сырой" строки, которая содержит символ \.

display(r'C:\Program Files')

# 4. После этого добавить инструкцию для вывода объединенной строки, включающей управляющий символ и знак пробела.

display('\nHello' + ' Python!!!')

# 5. Добавить инструкцию, выводящую срез указанной строки в соответствии с диапазоном номеров элементов.

display('Python in easy steps\n' [7:])

# 6. Отобразить результат поиска символов p и P в указанной строке.

display('p' in 'Python')
display('P' in 'Python')