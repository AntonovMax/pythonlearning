"""
    Принадлежность имен функций

    Каждый модуль имеет собственную таблицу симолов, которая используетя для всех функций, определенных в данном модуле
или программе.

    При импорте модуля с помощью import таблица символов этого модуля не добавляется в текущую таблицу символов
программы.
    При вызове функций из модуля следует использовать в имени функций префиксное имя данного модуля.

    Если в программе импортируем функция steps из модуля с именем ineasy, а также еще одну функцию steps из другого
модуля под именем dance, то затем без особых проблем можно вызвать эти функции с помощтю записей:
    ineasy.steps()
    dance.steps()
    Как правило, во избежании конфликтов предпочтительнее импортировать имена модулей и вызывать принадлежащие им
функции так, как было сказано выше, с помощью записи через префикс имени модуля.
    Можно импортировать отдельные имена функций с помощью инструкции from import.
    - имя модуля указывается после from
    - имена импортируемых функций - в виде разделенного запятой списка после import.
    (для импорта всех имен функций можно использовать import *, в этом случае все импортируемые функции можно будет
    вызывать без префикса по имени модуля).

!!! При импорте отдельных имен функций имена модулей не импортируются, поэтому их нельзя использовать в качестве
префикса.

    В больших программах можно импортировать одни модули в другие, организуя модульную иерархию.

Задания:
1. Начать новы модуль с определения функции, в которой задано значение ее аргумента по умолчанию.

dog.py

def bark(pet = 'A Dog'):
    print(pet, 'Says WOOF!')

2. Добавить еще 2 определения функции, задать значения по умолчанию для аргументов.

def lick(pet = 'A Dog'):
    print(pet, 'Drinks water')

def nap(pet = 'A Dog'):
    print(pet, 'Sleeps in the sun')

3. Сохранить под именем dog.py
4. Начать новую программу, включив инструкцию для доступа к модулю dog.
pooch.py    pooch - собака дворняжка

from dog import bark, lick, nap

5. Вызвать каждую функцию без подстановки аргументов

bark()
lick()
nap()

6. Вызвать все функции заново, передав начальное значение аргумента для каждой.

bark('Pooch')
lick('Pooch')
nap('Pooch')

7. Начать другую программу fido.py импортировать функци dog.

from dog import *

8. Добавить запрос пользователю ввести имя переменной, которая будет использоваться для перезаписи
значения аргумента по умолчанию.

pet = input('Enter a pit name: ')

9. Вызвать все функции, передав каждому аргументу значение, определенное пользователем.

bark(pet)
lick(pet)
nap(pet)

"""
