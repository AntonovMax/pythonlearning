"""
    Запуск таймера. Стр. 94 МакГрат.

    Для использования разлиных функций, связанных с системным верменем, можно импортирвоать модуль time.
    Обычно текущее системное время рассчитывается как кол-во секунд, прощедших с 00 часов 1 января 1970 г.
(так называемая эра Unix). Если вызвать метод time() модуля time, то он вернет текущее время в секундах,
прошедшее с вышеупомянутого момента начала эры Unix, в виде числа с плавающей точкой.
    Значение, возвращаемое методом time(), может быть преобразовано в объект struct_time при помощи методов
gmtime() и localtime(). Данный объек содержит атрибуты tm_year, tm_mon, tm_mday, tm_hour, tm_mim, tm_sec,
tm_wday, tm_yday, tm_isdst, к которым можно обратиться, используя точечную запись. Например: struct.tm_wday.

!!! Метод gmtime() преобразует время, выраженное в секундах, с начала эры Unix в объект struct_time с
    флагом DST, всегда равным нулу (флаг дневного времени), в то время как localtime() выполняет преобразо-
    вание в объект struct_time в соответствие с вашим локальным временем.

    Все, что находится в объекте struct_time, хранится в числовом виде и может быть преобразовано в тексто-
вый эквивалент при помощи метода strftime(). Данный метод требует наличия аргумента, который представляет
собой директиву, определяющую формат, после которой следует имя объекта. Например для недели запись выглудит:
    strftime('%A', struct).

    Модуль time предоставляет полезный метод sleep(), который можно использовать для того, чтобы организовать
паузы в выполнении программы. Аргумент этого метода определяет кол-во времени в секундах, на котороые нужно
сделать задержку.

!!! Не путать метод time.strftime() и метод datetime.strftime() из предыдущего примера.
"""

# Задания:
# 1. Импортировать модуль time.

from time import *

# 2. Инициализировать переменную, относящуюся к числовому типу с плавающей точкой, и задать ей значение времени,
#    прошешее с начала эры Unix.

start_timer = time()

# 3. Добавить инструкцию для созданяи объекта struct_time, используя эту переменную.

struct = localtime(start_timer)

# 4. Вывести сообщение о том, что с текущего момента времени стартует таймер обратного отсчета.

print('\nStarting countdown at:', strftime('%X', struct))

# 5. Добавить цикл с инициализацией и выводом переменной-счетчика, который на каждой итерации уменьшается на
#    единицу, и односекундной паузой.

i = 10
while i > -1 :
    print(i)
    i -= 1
    sleep(1)

# 6. Проинициализирвоать вторую переменную (число с плавающей точкой), которая представляет время, прощедшее
#    с начала эры Unix.

end_timer = time()

# 7. Проинициализировать переменную, которая будет представлять результат округления разности двух значений
#    времени.

difference = round(end_timer - start_timer)

# 8. Добавить инструкцию для вывода выполнения цикла обратного отсчета.

print('\nRuntime:', difference, 'seconds')